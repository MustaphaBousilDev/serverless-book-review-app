service: serverless-book-review-app
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    REVIEWS_TABLE: ${self:custom.reviewsTable}
    # its for using one connection for all request instead of establishe new connection each request , for optimizing performance and cost
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REVIEWS_BUCKET: my-review-files-bucket-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.reviewsTable}
    - Effect: Allow 
      Action:
        - s3:GetObject 
        - s3:PutObject 
      Resource: arn:aws:s3:::${self:provider.environment.REVIEWS_BUCKET}/*
  logs:
    restApi:
      accessLogging: true 
      executionLogging: true 
      level: INFO 
      fullExecutionData: true 
  tracing:
    lambda: true 
    apiGateway: true 
plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  createReview:
    handler: src/createReview/createReview.handler
    events:
      - http:
          path: /reviews
          method: post
          cors: true
    versioning:
      enabled: true 
    aliases:
      dev: $LATEST
      prod: stable 
    environment:
      LOG_LEVEL: info 
    reservedConcurrency: 10
    provisionedConcurrency: 5


  getReview:
    handler: src/getReview/getReview.handler
    events:
      - http:
          path: /reviews/{reviewId}
          method: get
          cors: true

  updateReview:
    handler: src/updateReview/updateReview.handler
    events:
      - http:
          path: /reviews/{reviewId}
          method: put
          cors: true

  deleteReview:
    handler: src/deleteReview/deleteReview.handler
    events:
      - http:
          path: /reviews/{reviewId}
          method: delete
          cors: true

resources:
  Resources:
    ReviewsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.reviewsTable}

    # Resource-based Policy
    CreateReviewLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: createReview
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: arn:aws:s3:::${self:provider.environment.REVIEWS_BUCKET}

custom:
  reviewsTable: reviews-table-${self:provider.stage}
  productionAlias: prod
      