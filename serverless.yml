service: serverless-book-review-app
package:
  individually: true 
  exclude:
    - .git/**
    - .vscode/**
    - node_modules/**
    - tests/**
  include:
    - src/**
provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 512
  timeout: 10
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    REVIEWS_TABLE: ${self:custom.reviewsTable}
    # its for using one connection for all request instead of establishe new connection each request , for optimizing performance and cost
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REVIEWS_BUCKET: my-review-files-bucket-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.reviewsTable}
    - Effect: Allow 
      Action:
        - s3:GetObject 
        - s3:PutObject 
      Resource: arn:aws:s3:::${self:provider.environment.REVIEWS_BUCKET}/*
  logs:
    restApi:
      accessLogging: true 
      executionLogging: true 
      level: INFO 
      fullExecutionData: true 
  tracing:
    lambda: true 
    apiGateway: true 
  versionFunctions: true # enable versioning for all functions
  
plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  createReview:
    handler: src/createReview/createReview.handler
    memorySize: 1024 # overriding memorySize in the top  (1024MB)
    timeout: 15 # second and overriding top value
    events:
      - http:
          path: /reviews
          method: post
          cors: true
    environment:
      LOG_LEVEL: info 
    #reservedConcurrency: 10
    #provisionedConcurrency: 5
    


  getReview:
    handler: src/getReview/getReview.handler
    events:
      - http:
          path: /reviews/{reviewId}
          method: get
          cors: true

  updateReview:
    handler: src/updateReview/updateReview.handler
    events:
      - http:
          path: /reviews/{reviewId}
          method: put
          cors: true

  deleteReview:
    handler: src/deleteReview/deleteReview.handler
    events:
      - http:
          path: /reviews/{reviewId}
          method: delete
          cors: true

resources:
  Resources:
    ReviewsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.reviewsTable}

    CreateReviewLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: CreateReviewLambdaFunction # this is syntax of cloudFormation not a serverless framework -> createReview(name of function in serverless) -> compile to (createReview) in CloudFormation
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: arn:aws:s3:::${self:provider.environment.REVIEWS_BUCKET}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.identityPoolName}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthenticatedRole, Arn]

    CognitoAuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: CognitoIdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        Policies:
          - PolicyName: CognitoAuthorizedPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource:
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:execute-api:'
                        - Ref: AWS::Region
                        - ':'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: ApiGatewayRestApi
                        - '/*'

custom:
  reviewsTable: reviews-table-${self:provider.stage}
  productionAlias: prod

  userPoolName: review-book-user-pool
  identityPoolName: review-book-identity-pool
  userPoolClientName: review-book-user-pool-client
      